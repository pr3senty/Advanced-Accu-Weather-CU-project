from aiogram import Router, F
from aiogram.filters import CommandStart
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery
from bot.utils.weather_requests import try_get_forecast

from bot.keyboards.all_kb import main_kb, cities_count_inline_kb, retry_inline_kb, cities_enter_inline_kb, change_city_inline_kb, time_range_inline_kb
from aiogram.fsm.context import FSMContext

commands_router = Router()

class Route(StatesGroup):
    cities_count = State()
    cities = State()
    city_idx = State()
    city = State()
    time_range = State()

    cities_inline_message = State()
    get_city_message = State()


@commands_router.message(CommandStart())
async def start_command(message: Message):
    text = """
–ü—Ä–∏–≤–µ—Ç!
 
 –Ø —É–º–µ—é –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞—Ç—å –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ–≥–æ–¥—É –≤ –≥–æ—Ä–æ–¥–∞—Ö –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è. –ò –ø–æ–º–æ–≥—É —Ç–µ–±–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—Ü–µ–Ω–∏—Ç—å \
—É—Å–ª–æ–≤–∏—è –¥–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π! 

–î–∞–≤–∞–π —Å–∫–æ—Ä–µ–µ –Ω–∞—á–Ω–µ–º
    """

    await message.answer(text, reply_markup=main_kb(message.from_user.id))

@commands_router.message(F.text == "/help")
@commands_router.message(F.text == "üìñ –ü–æ–º–æ—â—å")
async def help_command(message: Message):
    text = """
–ü–æ–º–æ—â—å –≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏:

    /weather - –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞

    /help - –ø–æ–º–æ—â—å

    /start - —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é
    """

    await message.answer(text)


@commands_router.message(F.text == "/weather")
@commands_router.message(F.text == "üìù –£–∑–Ω–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑")
async def weather_command(message: Message, state: FSMContext):

    await message.answer("–°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç –≥–æ—Ä–æ–¥–æ–≤ –≤ –º–∞—Ä—à—Ä—É—Ç–µ?", reply_markup=cities_count_inline_kb())
    await state.set_state(Route.cities_count)


@commands_router.callback_query(F.data.contains("route_cities_count"), Route.cities_count)
async def get_route_cities_count(call : CallbackQuery, state: FSMContext):
    cities_count = int(call.data.split(":")[1])

    await call.message.delete()
    await state.update_data(cities_count=cities_count)
    await state.update_data(cities=[None for _ in range(cities_count)])

    text="""
–°—É–ø–µ—Ä!
 
–¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π –Ω–∞—á–Ω–µ–º –≤–≤–æ–¥–∏—Ç—å –≥–æ—Ä–æ–¥–∞. 
 
–ó–∞–º–µ—Ç—å, —á—Ç–æ –ø–µ—Ä–≤—ã–π –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≥–æ—Ä–æ–¥ —ç—Ç–æ –ø—É–Ω–∫—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è!
    """

    cities_message = await call.message.answer(text=text, reply_markup=cities_enter_inline_kb(cities_count))

    await state.update_data(cities_inline_message=cities_message)
    await state.set_state(Route.cities)


@commands_router.callback_query(F.data.contains("change_city"), Route.cities)
async def update_route_city(call : CallbackQuery, state: FSMContext):
    city_idx = call.data.split(":")[1]

    await state.update_data(city_idx=city_idx)

    text = "–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:"

    get_city_message = await call.message.answer(text=text, reply_to_message_id=call.message.message_id, city_idx=city_idx)

    await call.answer(show_alert=False)
    await state.update_data(get_city_message=get_city_message)
    await state.set_state(Route.city)


@commands_router.message(F.text, Route.city)
async def get_new_city_name(message : Message, state: FSMContext):
    data = await state.get_data()

    city_idx = int(data.get("city_idx"))
    cities_message: Message = data.get("cities_inline_message")
    get_city_message : Message = data.get("get_city_message")

    cities = data.get("cities")
    cities[city_idx] = message.text

    await get_city_message.delete()
    await message.delete()
    await cities_message.edit_reply_markup(
        reply_markup=change_city_inline_kb(message.text, city_idx, cities)
    )
    await state.update_data(cities=cities)
    await state.set_state(Route.cities)


@commands_router.callback_query(F.data == "cities_collected", Route.cities)
async def check_cities(call : CallbackQuery, state: FSMContext):
    data = await state.get_data()

    cities : list = data.get("cities")
    cities_message : Message = data.get("cities_inline_message")

    if None in cities:
        await call.answer(text="–ù–µ –≤—Å–µ –≥–æ—Ä–æ–¥–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã!", show_alert=True)
        return


    await cities_message.delete()
    await call.message.answer("–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ! –ö–∞–∫–æ–µ –≤—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º?", reply_markup=time_range_inline_kb())
    await state.set_state(Route.time_range)


@commands_router.callback_query(F.data.contains("time_range"), Route.time_range)
async def get_time_range(call : CallbackQuery, state: FSMContext):
    data = await state.get_data()

    time_range = call.data.split(":")[1]
    route_cities : list = data.get("cities")

    await call.message.delete()
    await call.answer(show_alert=False)
    await call.message.answer("–£—Ä–∞! –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é...")

    response = await try_get_forecast(route_cities, time_range)

    if response["result"] == "uncorrect_cities":

        text = "–û–π. –ö–∞–∂–µ—Ç—Å—è –º—ã –Ω–µ –º–æ–∂–µ–º –Ω–∞–π—Ç–∏ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –≥–æ—Ä–æ–¥–∞.\n\n"

        cities : dict = response["values"]

        for name, suitable in cities.items():
            route_cities[route_cities.index(name)] = None

            if len(suitable) > 0:
                text += name + "\n–í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –∏–º–µ–ª–∏ –≤ –≤–∏–¥—É:\n"
                text += " ".join(suitable[:min(5, len(suitable))])
            text += "\n\n"

        await state.update_data(cities=route_cities)
        await call.message.answer(text, reply_markup=retry_inline_kb())
        await state.set_state(Route.cities_count)
        return

    if response["result"] == "successful":
        text = f"–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ {time_range}\n\n"
        text += f"""–†–µ–∑—É–ª—å—Ç–∞—Ç: {"–ù–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–µ" if response["forecasts"]["rate"] == "bad" else "–•–æ—Ä–æ—à–∏–µ"} —É—Å–ª–æ–≤–∏—è\n\n"""

        forecasts: dict = response["forecasts"]["values"]

        for city, forecast in forecasts.items():

            text += f"""
{city}
–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {forecast["mean_temperature"]["value"]}
–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {forecast["mean_wind_speed"]["value"]}
–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Å–∞–¥–∫–æ–≤: {forecast["mean_precipitation_probability"]["value"]}
–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≥—Ä–æ–∑—ã: {forecast["mean_thunderstorm_probability"]["value"]}\n\n"""


        await call.message.answer(text)


    if response["result"] == "server-error":
        await call.message.answer("–ù–µ –º–æ–∂–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É(", reply_markup=retry_inline_kb())
        await state.set_state(Route.cities_count)
        return


    await state.clear()


@commands_router.callback_query(F.data == "retry_enter", Route.cities_count)
async def retry_enter_cities(call : CallbackQuery, state: FSMContext):
    data = await state.get_data()

    cities_count = data.get("cities_count")
    cities = data.get("cities")
    text = """
    –•–æ—Ä–æ—à–æ, –¥–∞–≤–∞–π –∑–∞–Ω–æ–≤–æ –Ω–∞—á–Ω–µ–º –≤–≤–æ–¥–∏—Ç—å –≥–æ—Ä–æ–¥–∞. 

    –ó–∞–º–µ—Ç—å, —á—Ç–æ –ø–µ—Ä–≤—ã–π –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≥–æ—Ä–æ–¥ —ç—Ç–æ –ø—É–Ω–∫—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è!
        """

    cities_message = await call.message.answer(text=text, reply_markup=cities_enter_inline_kb(cities_count, cities))

    await call.answer(show_alert=False)
    await state.update_data(cities_inline_message=cities_message)
    await state.set_state(Route.cities)


@commands_router.message(F.text == "/query")
async def api_connect(message: Message):
    cities = ["–ú–æ—Å–∫–≤–∞", "–ö–∏—Ä–æ–≤–≥—Ä–∞–¥", "–ë–∞–≥–¥–∞–¥"]
    time_range = "12 —á–∞—Å–æ–≤"

    response = await try_get_forecast(cities, time_range)

    if response["result"] == "uncorrect_cities":

        text = "–û–π. –ö–∞–∂–µ—Ç—Å—è –º—ã –Ω–µ –º–æ–∂–µ–º –Ω–∞–π—Ç–∏ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –≥–æ—Ä–æ–¥–∞.\n\n"

        cities : dict = response["values"]

        for name, suitable in cities.items():
            text += name + "\n\n–í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –∏–º–µ–ª–∏ –≤ –≤–∏–¥—É:\n"
            text += " ".join(suitable)

        await message.answer(text)

    if response["result"] == "successful":
        text = f"""–†–µ–∑—É–ª—å—Ç–∞—Ç: {"–ù–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–µ" if response["forecasts"]["rate"] == "bad" else "–•–æ—Ä–æ—à–∏–µ"} —É—Å–ª–æ–≤–∏—è\n\n"""

        forecasts : dict = response["forecasts"]["values"]

        for city, forecast in forecasts.items():
            text += f"""
{city}

–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {forecast["mean_temperature"]["value"]}
–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {forecast["mean_wind_speed"]["value"]}
–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Å–∞–¥–∫–æ–≤: {forecast["mean_precipitation_probability"]["value"]}
–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≥—Ä–æ–∑—ã: {forecast["mean_thunderstorm_probability"]["value"]}\n\n"""

        await message.answer(text)

    if response["result"] == "limit":
        await message.answer("The allowed number of requests has been exceeded.")