from aiogram.types import KeyboardButton, ReplyKeyboardMarkup, KeyboardButtonPollType, InlineQueryResult, \
    InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder


def main_kb(user_telegram_id: int) -> ReplyKeyboardMarkup:
    kb_list = [
        [KeyboardButton(text="üìñ –ü–æ–º–æ—â—å"),],
        [KeyboardButton(text="üìù –£–∑–Ω–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑")]
    ]

    keyboard = ReplyKeyboardMarkup(
        keyboard=kb_list,
        resize_keyboard=True,
        one_time_keyboard=False,
        input_field_placeholder="–ß—Ç–æ –¥–µ–ª–∞–µ–º?"
    )

    return keyboard


def cities_count_inline_kb():
    builder = InlineKeyboardBuilder()

    builder.row(*[
        InlineKeyboardButton(text=str(i), callback_data=f"route_cities_count:{i}")
        for i in range(2, 5 + 1)
    ])

    return builder.as_markup()

def cities_enter_inline_kb(cities_count, custom=[]):
    builder = InlineKeyboardBuilder()

    for i in range(cities_count):
        text = f"–ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π –ø—É–Ω–∫—Ç {i}"

        if i == 0:
            text = "–ü—É–Ω–∫—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è"

        if i == cities_count - 1:
            text = "–ü—É–Ω–∫—Ç –ø—Ä–∏–±—ã–≤–∞–Ω–∏—è"

        if len(custom) == cities_count and custom[i] is not None:
            text = custom[i]

        builder.row(
            InlineKeyboardButton(text=text, callback_data=f"change_city:{i}")
        )

    builder.row(
        InlineKeyboardButton(text="–ì–æ—Ç–æ–≤–æ", callback_data="cities_collected")
    )

    return builder.as_markup()


def retry_inline_kb():
    builder = InlineKeyboardBuilder()

    builder.row(
        InlineKeyboardButton(text="–í–≤–µ—Å—Ç–∏ –∑–∞–Ω–æ–≤–æ", callback_data="retry_enter")
    )

    return builder.as_markup()


def change_city_inline_kb(city, idx, cities: list):
    builder = InlineKeyboardBuilder()

    for i in range(len(cities)):
        if i == idx:
            builder.row(
                InlineKeyboardButton(text=city, callback_data=f"change_city:{i}")
            )

            continue

        text = f"–ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π –ø—É–Ω–∫—Ç {i}"

        if i == 0:
            text = "–ü—É–Ω–∫—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è"

        if i == len(cities) - 1:
            text = "–ü—É–Ω–∫—Ç –ø—Ä–∏–±—ã–≤–∞–Ω–∏—è"

        builder.row(
            InlineKeyboardButton(text=text if cities[i] is None else cities[i], callback_data=f"change_city:{i}")
        )

    builder.row(
        InlineKeyboardButton(text="–ì–æ—Ç–æ–≤–æ", callback_data="cities_collected")
    )

    return builder.as_markup()


def time_range_inline_kb():
    builder = InlineKeyboardBuilder()

    for time_range in ["12 —á–∞—Å–æ–≤", "5 –¥–Ω–µ–π"]:
        builder.row(
            InlineKeyboardButton(text=time_range, callback_data=f"time_range:{time_range}")
        )

    return builder.as_markup()

def create_spec_kb():
    kb_list = [
        [KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ", request_location=True)],
        [KeyboardButton(text="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact=True)],
        [KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É/–æ–ø—Ä–æ—Å", request_poll=KeyboardButtonPollType())]
    ]
    keyboard = ReplyKeyboardMarkup(keyboard=kb_list,
                                   resize_keyboard=True,
                                   one_time_keyboard=True,
                                   input_field_placeholder="–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π:")
    return keyboard